generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Changelog {
  id       Int            @id @default(autoincrement())
  maintenanceid Int       @map("mid")
  maintenance Maintenance @relation(fields: [maintenanceid], references: [id])
  user     String         @db.VarChar(64)
  action   String         @db.VarChar(128)
  field    String?        @db.VarChar(128)
  datetime DateTime       @default(now()) @db.Timestamptz(6)
  @@map("changelog")
}

model Comment {
  id       Int         @id @default(autoincrement())
  maintid  Int
  maint    Maintenance @relation(fields: [maintid], references: [id])
  body     String      @db.VarChar(1024)
  datetime DateTime    @default(now()) @db.Timestamp(0)
  user     String      @db.VarChar(128)
  @@map("comments")
}

model Company {
  id                   Int     @id @default(autoincrement())
  name                 String  @db.VarChar(256)
  maildomain           String  @db.VarChar(64)
  maintenancerecipient String? @db.VarChar(255)
  lieferantcompany     Maintenance[]
  kundecompany         CustomerCircuit[]
  freezecompany        Freeze[]
  lieferantcidco       SupplierCircuit[]

  @@index([maildomain], name: "domains")
  @@map("companies")
}

model Freeze {
  id            Int      @id @default(autoincrement())
  companyid     Int
  company       Company  @relation(fields: [companyid], references: [id])
  startdatetime DateTime @db.Timestamptz(6)
  enddatetime   DateTime @db.Timestamptz(6)
  notes         String?  
  @@map("freeze")
}

model CustomerCircuit {
  id           Int              @id @default(autoincrement())
  lieferantcid Int?
  lieferant    SupplierCircuit? @relation(fields: [lieferantcid], references: [id])
  kundencid    String           @db.VarChar(1700)
  protected    String           @db.VarChar(16)
  companyid    Int              @map("kunde")
  kundecompany Company          @relation(fields: [companyid], references: [id])

  @@index([companyid], name: "kunde")
  @@index([lieferantcid], name: "lieferantCID")
  @@map("kundencid")
}

model SupplierCircuit {
  id        Int        @id @default(autoincrement())
  companyId Int?       @map("lieferant")
  company   Company?   @relation(fields: [companyId], references: [id])
  derencid  String     @db.VarChar(128)
  kundencid CustomerCircuit[]
  maintenancesupplier MaintenanceSupplierCircuits[]

  @@index([companyId], name: "lieferant")
  @@map("lieferantcid")
}

model Maintenance {
  id                  Int              @id @default(autoincrement())
  maileingang         DateTime?        @db.Timestamptz(6)
  sendermaintenanceid String?          @db.VarChar(256)
  receivedmail        String?          @db.VarChar(256)
  bearbeitetvon       String?          @db.VarChar(128)
  supplierid          Int              @map("lieferant")
  suppliercompany     Company?         @relation(fields: [supplierid], references: [id])
  // derencidid          Int[]            // Array of LieferantCID's i.e. "{12,48,38}"
  // suppliercircuits    SupplierCircuit? @relation(fields: [derencidid], references: [id])
  startdatetime       DateTime?        @db.Timestamptz(6)
  enddatetime         DateTime?        @db.Timestamptz(6)
  timezone            String?          @db.VarChar(64)
  timezonelabel       String?          @db.VarChar(128)
  postponed           String?          @db.VarChar(256)
  reason              String?          @db.VarChar(256)
  impact              String?          @db.VarChar(256)
  location            String?          @db.VarChar(256)
  maintnote           String?          @db.VarChar(512)
  notes               String?   
  mailsentat          DateTime?        @db.Timestamptz(6)
  done                Boolean          @default(false)
  inbearbeitung       Boolean          @default(false)
  updatedat           DateTime?        @default(now()) @db.Timestamp(0)
  updatedby           String?          @db.VarChar(64)
  active              Boolean          @default(true)
  cancelled           Boolean          @default(false)
  emergency           Boolean          @default(false)
  betroffenekunden    String?          @db.VarChar(1024)
  betroffenecids      String?          @db.VarChar(1024)
  mailbody            String?   
  calendarid          String?         @db.VarChar(256)
  rescheduled         Int             @default(0)
  reschedules         Reschedule[]
  comments            Comment[]
  changelog           Changelog[]
  maintenancesupplier MaintenanceSupplierCircuits[]

  @@index([bearbeitetvon], name: "bearbeitet")
  @@index([supplierid], name: "index_lieferant")
  @@index([startdatetime, enddatetime], name: "startenddatetime")
  @@map("maintenancedb")
}

model Reschedule {
  id            Int           @id @default(autoincrement())
  label         String        @db.VarChar(16) @map("rid")
  maintenanceid Int
  maintenance   Maintenance   @relation(fields: [maintenanceid], references: [id])
  rcounter      Int
  user          String        @db.VarChar(64)
  datetime      DateTime      @default(now()) @db.Timestamptz(6)
  sdt           DateTime      @db.Timestamptz(6)
  edt           DateTime      @db.Timestamptz(6)
  reason        String?       @db.VarChar(256)
  location      String?       @db.VarChar(256)
  impact        String        @db.VarChar(256)
  active        Boolean       @default(false)
  sent          Int           @default(0) @db.SmallInt
  @@map("reschedule")
  @@unique([maintenanceid, rcounter])
}

model MaintenanceSupplierCircuits {
  maintcircuitid      Int           @id @default(autoincrement())
  maintenance_id      Int
  maintenance         Maintenance @relation(fields: [maintenance_id], references: [id])
  suppliercircuits_id Int
  suppliercircuit     SupplierCircuit @relation(fields: [suppliercircuits_id], references: [id])

  @@map("maintsuppliercircuits")
}